（現職にて）
B2B マーケティングに特化したマーケティングオートメーションツールの Web トラッキング分野を担当しています。

月間 PV 1000 万程度のリクエスト数ですが、、、
データセンターで捌くよりもスケーラビリティのある AWS 環境へ移行し、
より大規模なリクエストにも耐えられるようにすることを目的としてアプリケーションのインフラ移行 (EC2, RDS)、
並びにリリース自動化を行いました。

チームメンバー
・開発エンジニア: 2 名
・QA エンジニア: 1 名
・インフラエンジニア: 1 名

役割
・開発エンジニア
・プロジェクトはスクラムで実施し、 1 week で回しました。

苦労した点
1. インフラ構成の把握
転職して初めて配属されたプロジェクトだったため、アプリケーションのインフラ構成を把握するのに時間を要しました。
後からジョインしたメンバーが構成を把握しやすいよう、 Cacoo に図面を起こすことで忘れても思い出せるようにしておきました。
このおかげで、後から配属された新卒メンバーの学習時間を短縮できました。

2. AWS 環境とデータセンターとの疎通確認
データセンター側で動作するアプリケーションへのデータ同期の都合上、 AWS 環境から疎通できるようにする必要がありました。
インフラエンジニアに疎通したい IP やポート番号を伝え、設定していただくことで解決しました。
全てを開発エンジニアでやる必要はなく、適材適所で進めれば良いので助かりました。

3. データ移行
Postgresql のデータを非停止で移行する必要があるため、 init SQL で RDS を初期化した上で
perl で移行スクリプトを書き、数日かけてデータ移行を行いました。

4. アプリケーションのモダン化
レガシーな Perl 製 Web アプリケーションですが、少しでもモダン化できるよう、
FastCGI から PSGI (Starman) への移行を行いました。

5. アプリケーションの Docker 化
インフラエンジニアが転職することになり、リリース作業の属人化を排除するため、リリース自動化を行いました。
Docker を利用してアプリケーションをコンテナイメージ化し、それを起動すれば良い状態にしました。
イメージは自社の docker-registry に登録する仕組みとしました。
また、リリースをサーバコンソールで実施するのではなく、 Jenkins Job からのボタン起動とすることで、リリースを簡略化することも達成できました。
