現職にて、シナリオエディタ機能 (ダイアグラム描画 Web エディタ) のフロントエンド設計・開発を行いました。

チームメンバー
・PdM: 1 名
・フロントエンドエンジニア: 2 名 (内 1 名スクラムマスタ兼任)
・バックエンドエンジニア: 3 名 (内 1 名スクラムマスタ兼任)
・デザインエンジニア: 1 名

役割
・フロントエンドエンジニア
・ダイアグラム描画ライブラリ選定
・スクラムマスタも兼任しました

苦労した点
a. 開発
a-1. JavaScript の全体設計 (データの状態管理)
社内では初の SPA 作成となりました。
複数人で開発するにはデータの状態管理が最重要だと考え、 Flux を参考に、特定アクションでのみデータが変更されるよう設計しました。
データの状態管理の実装には EventEmitter3 を活用しました。

a-2. ダイアグラム描画ツールのバグ修正 #1
ダイアグラム描画ライブラリにバグと思われる挙動が見つかったため、
OSS に p-r を出してマージしてもらい解決しました。
https://github.com/clientIO/joint/pull/704

a-3. ダイアグラム描画ツールのバグ修正 #2
有効非巡回グラフ (DAG) の計算を行うライブラリに不都合な挙動が見つかったため、
止むを得ずライブラリの修正を行い解決しました。

a-4. フォーム入力項目の作成
シナリオステップの種類に応じてフォーム入力項目が変化するため、 vue-formly を利用してカスタムフィールドコンポーネントを構築しました。

a-5. Unit Test #1
jest を利用しましたが、 SVG Element をサポートしていないことが判明しました。
jest が利用している jsdom のバージョンを上げることで解決しました。

a-6. Unit Test #2
jest を利用していると、 window.location.search の変更ができないことが判明しました。
window.location を返す関数を作り、それを mock 化することで search パラメータを UT でも取得できるようになりました。

a-7. Test
テスト用 API モックサーバを Nginx ですぐ立ち上げられるようにするため、
Dockerfile を書き、開発メンバーがそれぞれモックサーバを立ち上げられるにしました。

b. マネジメント
b-1. 上海チームメンバーとのコミュニケーション
開発拠点が上海にもあるため、日々の進捗や困りごとの共有が上辺だけにならないように気を使いました。
Slack Call の画面共有を利用し、コーディングで困っている点を見ながらレビューする疑似ペアプロを行い、 p-r 手戻りを極力防止しました。
