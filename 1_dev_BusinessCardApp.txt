現職にて、名刺管理モバイルアプリを作成することになり、
名刺検出エンジンと iOS アプリの設計・開発を主に担当しました。

チームメンバー
・ PdM: 1 名
・エンジニア: 3 名 (内 1 名スクラムマスタ兼任)
・デザインエンジニア: 1 名

役割
・OpenCV エンジニア
・iOS エンジニア

工数
・名刺検出エンジンを 2 ヶ月ほどかけて開発しました。
・iOS アプリ自体は 4 ヶ月ほどかけて開発しました。

開発手法
・スクラム開発で行いました。
・スプリントは 1 週間とし、 Pivotal Tracker でチケットやベロシティの管理を行いました。

良かった点
a. OpenCV による名刺検出エンジンの開発
1. OpenCV, C++ 未経験でも、まずは製品として出せたこと。

b. Swift での iOS アプリ開発
1. サポート OS を iOS 11 に絞ったことで、 iOS 10 以下のケアをせずに済んだこと。
2. Swift 未経験でもまずは製品として出せたこと。

苦労した点
a. OpenCV による名刺検出エンジンの開発
a-1. 画像のローテーションが失われてしまう問題
傾向を把握し、画像ローテーション補正用の function を作成して解決しました。

a-2. 複数の矩形が入った名刺の検出率向上
OpenCV で検出される矩形輪郭の階層情報を利用して解決しました。

a-3. 名刺画像の鮮明化
C++ でコントラスト調整、ガンマ補正の関数を用意して解決しました。

a-4.影が入った際、検出率が低下する問題を解決するのが極めて困難
この問題は解決できませんでした。今後の課題です。

b. Swift での iOS アプリ開発
b-1. Realm データを iCloud に保存させないようにしたい
データを /Library/Caches に置くことで、解決できました。

b-2. REST API で受信する JSON データの値の型が動的に変わるので、 Swift の型付けができない問題
JSON データのメタデータも JSON で受信しており、それは Swift の型付けが可能なので、 JSON データは文字列として保存し、画面表示の際に JSON 変換し、メタデータと照合して Swift の型付けられた値に変換する仕組みを作って解決した。
※ iOSDC Japan 2018 に CfP を提出しました。 (現状不採択ですが、、、)
https://fortee.jp/iosdc-japan-2018/proposal/d692ec3d-9cc7-4fa5-9ca7-4aea853af45a

b-3. フォーム入力 UITableView の作成
ユーザが自由にフォーム入力項目を定義できるため、その JSON データに応じて動的に UITableViewCell を用意できる処理を構築しました。

今後の改善点
・名刺検出カメラの改善。（文字の部分認識実現、影が入った際の処理改善）
・XCTest で UT を増やすこと。
・fastlane で配信を自動化したい。
